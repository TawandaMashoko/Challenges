Problem: Map of Highest Peak
Approach:
Algorithms: 
BFS':

1. From the water, went layer by layer, the 1st layer from the water source is going to be 1 and the next 2.
It is simple when you have a single water cell.
With Multiple cells,

2. Multi Source BFS
BFS is a Queue Data Structure, so we will add the water cells[0] at the same time

1. Phase 1 is get all water cells and add them to the queue or enqueue (q)
2. We will do this through nested loops, we will check if cell is water in positions [r][c] if its == 1.
3. Add(r,c) to the queue to start the BFS from that cell.
4. When i enqueue a node i mark it as visited to not come back to it again, i will add it to the variable visit.
5. initialize a res matrix of 0's inside the loop "res[r][c] = 0", which is -1 globally.
6. After this we start the BFS, "while q"
7. We have to make sure that there are inbounds by checking is nr < 0 or nc < 0 or nr == ROWS or nc == COLS to continue to the next iteration of the loop and also check if (nr, nc) in visited. 
8. Return res

Greedy:Make sure all the neighbors are n + 1 atleast

O's are Land cells and 1's are water cells.
0 or 1 are not heights and non have been pop.
We do not need to assign a height to the water cells because it is given already given as 0.
So when creating an output matrix for that corresponding position, we are going to set them to 0.
The rest of the heights must me non negative and 0 is non negative

Code:
class Solution:
    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:
        ROWS, COLS = len(isWater), len(isWater[0])
        q = deque()   # r, c, 
        visit = set() 
        res = [[-1] * COLS for _ in range(ROWS)]
        
        for r in range(ROWS):
            for c in range(COLS):
                if isWater[r][c]:
                    q.append((r, c))
                    visit.add((r, c))
                    res[r][c] = 0 
        while q:
            r, c = q.popleft()
            h = res[r][c]

            neighbors = [[r + 1, c], [r, c + 1], [r - 1, c], [r, c - 1]]
            for nr, nc in neighbors:
                if (nr < 0 or nc < 0 or
                    nr == ROWS or nc == COLS or (nr, nc) in visit
                 ):
                    continue 
                q.append((nr, nc)) 
                visit.add((nr, nc))
                res [nr][nc] = h + 1 
        return res


        
