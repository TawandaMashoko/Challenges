Problem: Given a 0 indexed binary string s having an even length, a string is beautiful if I can partition it into one or more substrings such that:
1. Each string has an even length.
2. Each substring contains only '1's or '0's, meaning I can change any character in s to 1 or 0.
Then lastly return the minimum number of changes required to make string s beautiful.

Example 1
Input s = "1001"
Output: 2
Explanation: We only change s[1] to 1 and s[3] to 0. "1100" is beautiful because we can partition it into "11|00," proving that 2 is the minimum number of changes required to make the string beautiful.

Approach
One pointer approach, index[i], compares index 0[0] with the next index 1[0] and compares the 2nd position if they are the same, then we shift to the next pair, [01] are not the same, so we change either of the 2 and increment the result variable by 1. 
It is a linear time approach 0(n) and will be constant space 0(1). 
s = 00101100, 

Code:

class Solution:
    def minChanges(self, s: str) -> int:

        res = 0

        for i in range(0, len(s), 2):
            if s[i] != s[i + 1]:
                res += 1
        return res
        
