Problem:
We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output traversal of this traversal, recover the tree and return its root.

Approach:

Idea - we are given a pre order traversal of a binary tree
we are given 1 and then a single dash again and then a 2, then 2 dashes then 3, 2 more dashes then 4 then a single dash and then 5, then 2 dashes and then 6, lastly 2 dashes with 7 and they are represented by a single string.

1. the numbers themselves represent the value of each node.
2.  each depth will tell us the "Depth" of that node
 - this is useful because the first dash tells us that 1 is the root because there are no dashes before it
 - 
3. What we are trying to do is to rebuild a binary tree and return the root of that tree, and each dash telling us the level of each node.
4. The second level can only have up to "2 nodes" 
5. The order has to be a pre-order traversal if you do not know how these work i recommend you to check out neetcode.io
 -  the condition made with the problem was stated that if that node only has one child, that child is gauranteed to be the left child, meaning we are starting from the left Child.

Data Structure:

Stack -> to go through the Input in 0(n), because tree traversals can be simulated through a stack.
Stack is a recursive function, and it is way better than loops because we can make a function that calls itself.
1. We have a 1, we create a tree node of 1 and we will add it to the stack, and keep parsing the string.
2. keep track of the dashes which is one and then the next number is 2, so the first dash will be assigned to the left most child and then if we see another dash we add it to the right child.
3. We see 2 dashes and the value for the node is 3, which will be on the next level because it has 2 dashes. 
4. On the 4, we see the length of the stack is not greater than the number of dashes of the current node which is 4 so that is fine we do not have to pop anything but just add 4 to the left pointer of the prev node 3.
5. Now we see 1 dash and then the 5, now we need to pop from the stack, we keep popping from the stack while the length of the stack is greater than the number of dashes, this tells us that now we have gone as far deep as we can and we have to pop till we come back to the root and start filling in the right side



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def recoverFromPreorder(self, traversal: str) -> Optional[TreeNode]:
        stack = []
        i = 0  # Track position in the string
        
        while i < len(traversal):
            dashes = 0  # Reset dashes for each node
            
            # Count depth (number of dashes)
            while i < len(traversal) and traversal[i] == "-":
                dashes += 1
                i += 1
            
            # Get the node value
            j = i
            while j < len(traversal) and traversal[j] != "-":
                j += 1
            val = int(traversal[i:j])
            
            node = TreeNode(val)
            
            # Adjust stack to match the correct depth
            while len(stack) > dashes:
                stack.pop()
            
            # Assign the node to its correct parent
            if stack:
                if not stack[-1].left:
                    stack[-1].left = node
                else:
                    stack[-1].right = node
            
            # Push the current node to stack
            stack.append(node)
            
            # Move to the next position
            i = j
        
        return stack[0]  # Root of the reconstructed tree
 
