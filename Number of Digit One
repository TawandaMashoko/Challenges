Problem : Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.
understanding the problem:
n = 13 in the example in LeetCode
1 occurs in  1, 10, 11, 12 and 13.
the total number of ones is 6, since the digit 11 has 2 ones. 

Edge Cases:
Establish a Pattern, from (0-9) how many 1's occur? just 1. (0-99)? there will be 2 blank digits how many times will the units place have one in it, (01, 11, 21, 31, 41, 51, 61, 71, 81 to 91 excluding 100)
the units place are going to be filled with one like shown in the parenthesis and also for the 10th place, it will also have (10) 1's, so the total is going to be 10 + 10 = 20, 0 - 100, we have 3 blanks, from 100 to 199, first it will be a total of (100) 1's, now how can 
the 10th place be filled with one? between 0 and 100 we are going to have 10 occurances of 1 in the 10th place between 100 and 200 another 10 occurances (between 110 and 190) and this pattern repeats for 200 to 999, so it is 10 x 10 which is 100, and the units base can be
filled in 100 ways, from 0 to 10 => 1, 0 to 100 => 20, 0 to 1000 => 300, 0 to 10000 => 4000, the pattern is that the number keeps increasing by one, (1,2,3,4 and 0 is added from 20) in general the nth term is going to have n-1 0's following it. 

lets look at 2305, the goal is to iterate from left to right, the first digit is 2 and it is at the 1000th's place, if we want to eliminate this number we have to calculate all the ones from 0 to 2000, the 1000th place is going to have (1000) 1's i.e. from 1000 to 1999,
and the remaining placees we already know that between 0 and 1000 there is a total of (300) 1's, n x 10^n-1= 300 so from 0 to 200 = 2x300, 0-2000 = 1000 + 2(300) = 1600, from 2000 to 2300 is the second position, 100 + 3(20) = 160, when there is a 0 we skip, and 
for the last one there is just one occurance from 0-5. 

Code
class Solution(object):
    def countDigitOne(self, n):
        """
        :type n: int
        :rtype: int
        """

        count = 0
        factor = 1 # Start at the One's Place

        while factor <= n:
            lower_digits = n % factor # digits to the right of the current side
            current_digit = (n // factor) % 10 # the current digit we are inspecting
            higher_digits = n // (factor * 10)  # digits to the left of the current place 

            # count the number of 1's contributed by that current place
            if current_digit == 0:
                count += higher_digits * factor
            elif current_digit == 1:
                count += higher_digits * factor + lower_digits + 1
            else:
                count +=(higher_digits + 1) * factor
            
            factor *= 10
        return count

        
