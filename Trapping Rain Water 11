Problem: Trapping Rain Water II - Hard Problem
Approach: BFS Graph Traversal.
1. Tracking the maximum height that we have popped,
and as we pop given node, for that given node, i am going to calculate
how much water is going to be stored there and we are going to do that
by CALCULATING THE MAX HEIGHT WE ALREADY POPPED.
NB: this is not a standard (Dijsktra Algorithm)
2. Intuitively we popped 0, but in the first traversal we popped 1
as the max height, in the first list, we pop 3 ones and the max height
we also popped there was also 1.
3. Do a calculation, taking the max height and subtract from it the current height, for the first iteration of the loop it is going to be 0, for that given node(h,r,c), we will go through the 4 directions
(neighbors) and the if statement is making sure that the coordinate is
in bound, an if is a condition made now, and if it has not been already
visited, if it has then we continue to the next iteration.
4. After that, we ten take the neighbor (nr[neighbor row]) and nc
[neighbor column], we will take the height of it and add it to the 
min_heap alone with the coordinates of it(nr, nc).
Then Mark that coordinate as visited(heightMap[nr][nc])
5. After popping everything from the min_heap( while min_heap ).
we return the res.

Time Complexity 
0(n * m * lognm(it is the heappop and push operation))

Code Implementation:
class Solution:
    def trapRainWater(self, heightMap: List[List[int]]) -> int:
        ROWS, COLS = len(heightMap), len(heightMap[0])
        #Add border to the min-heap, mark as visited.
        min_heap = []
        for r in range(ROWS):
            for c in range(COLS):
                if r in [0, ROWS - 1] or c in [0, COLS - 1]:
                    heappush(min_heap, (heightMap[r][c], r, c))
                    heightMap[r][c] = - 1 # mark as visited 
        # Prioritize small heights.
        # Maintain max height to calculate.  
        # water stored in each position.

        res = 0
        max_h = -1 

        while min_heap:
            h, r, c = heappop(min_heap)
            max_h = max(max_h, h)
            res += max_h - h

            neighbors = [[r + 1, c], [r - 1, c], [r, c + 1], [r, c - 1]]
            for nr, nc in neighbors:
                if (
                    nr < 0 or nc < 0 or nr == ROWS or nc == COLS
                    or heightMap[nr][nc] == -1
                ):
                    continue
                heappush(min_heap, (heightMap[nr][nc], nr, nc))
                heightMap[nr][nc] = -1
        
        return res

        
